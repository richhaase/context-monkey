import os from 'os';
import path from 'path';
import fs from 'fs-extra';
import type { InstallOptions } from '../../types/index.js';
import { loadCommandTemplates } from '../../utils/resources.js';
import { renderCommandForTarget } from '../../templates/index.js';
import { TargetAgent } from '../../types/index.js';

import packageJsonData from '../../../package.json' with { type: 'json' };
const packageJson = packageJsonData;

type GeminiInstallOptions = Pick<InstallOptions, 'assumeYes' | 'local'>;

const COMMAND_NAMESPACE = 'context-monkey';
const GEMINI_CONTEXT_FILE = 'GEMINI.md';

export async function installGemini(options: GeminiInstallOptions): Promise<void> {
  const baseDir = resolveGeminiBaseDir(Boolean(options.local));
  const commandsDir = path.join(baseDir, 'commands', COMMAND_NAMESPACE);
  const extensionDir = path.join(baseDir, 'extensions', COMMAND_NAMESPACE);

  await fs.ensureDir(baseDir);

  const resourcesDir = path.join(import.meta.dirname, '../../../resources');
  const commandTemplates = loadCommandTemplates(resourcesDir);
  const renderedCommands = commandTemplates.map(template =>
    renderCommandForTarget(template, TargetAgent.GEMINI_CLI)
  );

  console.log(
    `Installing Context Monkey commands for Gemini CLI (${options.local ? 'workspace' : 'user'} scope)...`
  );

  try {
    await fs.remove(commandsDir);
  } catch {
    // ignore cleanup errors when removing existing commands
  }
  await fs.ensureDir(commandsDir);

  for (const rendered of renderedCommands) {
    const targetPath = path.join(commandsDir, rendered.targetRelativePath);
    await fs.ensureDir(path.dirname(targetPath));
    await fs.writeFile(targetPath, rendered.content, 'utf8');
  }

  await fs.ensureDir(extensionDir);
  await fs.writeFile(
    path.join(extensionDir, 'gemini-extension.json'),
    JSON.stringify(
      {
        name: COMMAND_NAMESPACE,
        version: packageJson.version,
        contextFileName: GEMINI_CONTEXT_FILE,
      },
      null,
      2
    ) + '\n',
    'utf8'
  );

  await fs.writeFile(
    path.join(extensionDir, GEMINI_CONTEXT_FILE),
    buildGeminiContextSummary(renderedCommands.length),
    'utf8'
  );

  console.log(`  ${baseDir}/commands/${COMMAND_NAMESPACE}/ - Commands synced`);
  console.log(`  ${baseDir}/extensions/${COMMAND_NAMESPACE}/ - Extension metadata updated`);
  console.log('âœ… Gemini CLI resources installed');
}

function resolveGeminiBaseDir(isLocal: boolean): string {
  if (isLocal) {
    return path.join(process.cwd(), '.gemini');
  }
  return path.join(os.homedir(), '.gemini');
}

function buildGeminiContextSummary(commandCount: number): string {
  return `# Context Monkey

Context Monkey commands are installed under the "${COMMAND_NAMESPACE}" namespace.
Use "/${COMMAND_NAMESPACE}:intro" inside Gemini CLI to discover the toolkit.

Installed commands: ${commandCount}.
Generated by Context Monkey v${packageJson.version}.
`;
}
